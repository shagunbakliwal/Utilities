import org.apache.kafka.clients.producer.*;
import org.apache.kafka.common.serialization.StringSerializer;

import java.util.Properties;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

public class FastKafkaProducerRunnable implements Runnable {

    private final KafkaProducer<String, String> producer;
    private final String topic;
    private final int startIndex;
    private final int endIndex;

    public FastKafkaProducerRunnable(KafkaProducer<String, String> producer, String topic, int startIndex, int endIndex) {
        this.producer = producer;
        this.topic = topic;
        this.startIndex = startIndex;
        this.endIndex = endIndex;
    }

    @Override
    public void run() {
        for (int i = startIndex; i < endIndex; i++) {
            String key = "key-" + i;
            String value = "message-" + i;
            // Asynchronous send for maximum throughput
            producer.send(new ProducerRecord<>(topic, key, value), (metadata, exception) -> {
                if (exception != null) {
                    System.err.println("Error producing message " + i + ": " + exception.getMessage());
                }
            });
        }
        System.out.println("Thread finished producing from " + startIndex + " to " + endIndex);
    }

    public static void main(String[] args) throws InterruptedException {
        String topic = "your-topic";
        int totalMessages = 20_000_000;
        int threads = 8; // Tune this based on CPU cores

        // Kafka producer properties
        Properties props = new Properties();
        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        props.put(ProducerConfig.ACKS_CONFIG, "1");
        props.put(ProducerConfig.LINGER_MS_CONFIG, "10");
        props.put(ProducerConfig.BATCH_SIZE_CONFIG, 32768);
        props.put(ProducerConfig.COMPRESSION_TYPE_CONFIG, "lz4");
        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, 67108864);
        props.put(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION, 5);

        KafkaProducer<String, String> producer = new KafkaProducer<>(props);

        // Thread pool setup
        ExecutorService executor = Executors.newFixedThreadPool(threads);
        int batchPerThread = totalMessages / threads;

        long start = System.currentTimeMillis();

        for (int i = 0; i < threads; i++) {
            int startIndex = i * batchPerThread;
            int endIndex = (i == threads - 1) ? totalMessages : startIndex + batchPerThread;
            executor.submit(new FastKafkaProducerRunnable(producer, topic, startIndex, endIndex));
        }

        executor.shutdown();
        executor.awaitTermination(30, TimeUnit.MINUTES);

        producer.flush();
        producer.close();

        long end = System.currentTimeMillis();
        System.out.println("âœ… Completed sending " + totalMessages + " messages in " + (end - start) / 1000 + " seconds");
    }
}